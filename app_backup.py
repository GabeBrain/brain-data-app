# app.py

import streamlit as st
import logging
import sys
import traceback

# --- Bloco de Diagn√≥stico e Logging ---
# Configura o logging para imprimir no console (que aparece no log do Streamlit Cloud)
logging.basicConfig(
    level=logging.INFO, 
    stream=sys.stdout, 
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logging.info("--- INICIANDO EXECU√á√ÉO DO SCRIPT app.py ---")

# Importa as fun√ß√µes do banco de dados DEPOIS de configurar o logging
try:
    from src.database import init_db_schema
    logging.info("Importa√ß√£o de 'init_db_schema' bem-sucedida.")
except ImportError as e:
    logging.error(f"FALHA CR√çTICA na importa√ß√£o: {e}")
    st.error(f"N√£o foi poss√≠vel importar fun√ß√µes essenciais. Verifique o arquivo src/database.py. Erro: {e}")
    st.stop() # Interrompe a execu√ß√£o se a importa√ß√£o falhar

# --- Inicializa√ß√£o do Banco de Dados com Captura de Erro ---
try:
    logging.info("Tentando inicializar o schema do banco de dados...")
    init_db_schema()
    logging.info("Verifica√ß√£o/Inicializa√ß√£o do schema do banco de dados conclu√≠da com sucesso.")
except Exception as e:
    # Se a inicializa√ß√£o do DB falhar, exibe o erro completo e interrompe
    logging.error("FALHA CR√çTICA ao inicializar o schema do banco de dados.")
    
    # Pega o traceback completo para depura√ß√£o m√°xima
    tb_str = traceback.format_exc()
    logging.error(tb_str)
    
    st.error("Ocorreu um erro cr√≠tico durante a inicializa√ß√£o da conex√£o com o banco de dados.")
    st.error("Isso geralmente √© causado por 'Secrets' (credenciais) incorretos ou problemas de rede.")
    st.code(tb_str) # Exibe o erro t√©cnico completo na tela
    st.stop() # Interrompe a execu√ß√£o

# --- Conte√∫do da P√°gina Principal ---

st.set_page_config(
    layout="wide",
    page_title="P√°gina Inicial | App de An√°lise de Pesquisas",
    page_icon="üß†"
)
st.logo("assets/logoBrain.png")

logging.info("Renderizando a p√°gina principal do Streamlit...")

st.title("üß† Bem-vindo ao App de An√°lise de Pesquisas")
st.markdown("---")
st.header("Vis√£o Geral do Projeto")
st.markdown("""
Esta aplica√ß√£o foi desenvolvida para automatizar o ciclo de vida dos dados de pesquisas de mercado, desde a ingest√£o via API at√© a an√°lise e gera√ß√£o de amostras estrat√©gicas.

**Utilize o menu lateral para navegar entre as funcionalidades:**

- **`Gerenciar Pesquisas`**: Adicione, edite e atualize os dados de novas pesquisas.
- **`An√°lise Consolidada`**: Explore as respostas brutas e a sa√∫de da consolida√ß√£o dos dados.
- **`Dashboard de An√°lise`**: Visualize os dados de forma interativa com filtros din√¢micos.
- **`Dashboard de Controle`**: Monitore o andamento da coleta de campo.
- **`Gerador de Amostra`**: Crie planos de amostragem e extraia amostras otimizadas.
- **`Manuten√ß√£o e Admin`**: Ferramentas para administradores do sistema.
""")

logging.info("--- RENDERIZA√á√ÉO DA P√ÅGINA CONCLU√çDA ---")